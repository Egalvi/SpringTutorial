<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <bean id="helloWorld" class="ru.egalvi.springtutorial.HelloWorld" lazy-init="false">
        <property name="message" value="Hello World!"/>
    </bean>

    <bean id="helloIndia" class="ru.egalvi.springtutorial.HelloIndia" parent="helloWorld">
        <!--<property name="message1" value="Hello India!"/>-->
        <property name="message2" value="Namaste India!"/>
    </bean>

    <bean id="helloWorldPrototype" class="ru.egalvi.springtutorial.HelloWorld"
          scope="prototype">
    </bean>

    <bean id="initDisposeBeanExampleWithInterfaces"
          class="ru.egalvi.springtutorial.InitDisposeBeanExampleWithInterfaces">
    </bean>

    <bean id="initDisposeBeanExampleWithXmlConfig"
          class="ru.egalvi.springtutorial.InitDisposeBeanExampleWithXmlConfig"
          init-method="init" destroy-method="destroy"> <!--lazy-init="true"-->
    </bean>

    <!--<bean class="ru.egalvi.springtutorial.PostProcessorExample"/>-->

    <!--
    You can create a Bean definition template which can be used by other child bean definitions without putting much effort. While defining a Bean Definition Template, you should not specify class attribute and should specify abstract attribute with a value of true as shown below:
    The parent bean cannot be instantiated on its own because it is incomplete, and it is also explicitly marked as abstract. When a definition is abstract like this, it is usable only as a pure template bean definition that serves as a parent definition for child definitions.
    -->
    <bean id="beanTeamplate" abstract="true">
        <property name="message" value="Hello World!"/>
        <property name="message2" value="Hello Second World!"/>
        <!--<property name="message3" value="Namaste India!"/>-->
    </bean>

    <bean id="helloIndia2" class="ru.egalvi.springtutorial.HelloIndia" parent="beanTeamplate">
        <property name="message" value="Hello India!"/>
        <!--<property name="message3" value="Namaste India!"/>-->
    </bean>


    <!-- Definition for textEditor bean using inner bean -->
    <bean id="textEditor" class="ru.egalvi.springtutorial.TextEditor">
        <property name="spellChecker">
            <bean id="spellChecker" class="ru.egalvi.springtutorial.SpellChecker"/>
        </property>
    </bean>

    <!-- inject singleton in prototype -->
    <!--<bean id="spellChecker" class="ru.egalvi.springtutorial.SpellChecker"/>-->
    <!--&lt;!&ndash; Definition for textEditor bean using inner bean &ndash;&gt;-->
    <!--<bean id="textEditor" class="ru.egalvi.springtutorial.TextEditor" scope="prototype">-->
    <!--<property name="spellChecker" ref="spellChecker">-->
    <!--</property>-->
    <!--</bean>-->

    <!--
    You can mix both, Constructor-based and Setter-based DI but it is a good rule of thumb to use constructor arguments for mandatory dependencies and setters for optional dependencies.
    Code is cleaner with the DI principle and decoupling is more effective when objects are provided with their dependencies. The object does not look up its dependencies, and does not know the location or class of the dependencies rather everything is taken care by the Spring Framework.
    -->

    <!-- inject prototype into singleton -->
    <!--
    In order to have a kind of factory for your prototype bean you could use an ObjectFactory as follows:

@Component
public class SingletonBean {

    @Autowired
    private ObjectFactory<PrototypeBean> prototypeFactory;

    public void doSomething() {
        PrototypeBean prototypeBean = prototypeFactory.getObject();
        prototypeBean.setX(1);
        prototypeBean.display();
    }
}
and your prototype bean would be declared as follows:

@Component
@Scope(value="prototype")
public class PrototypeBean {
    // ...
}
-->


    <!--
    You have seen how to configure primitive data type using value attribute and object references using ref attribute of the <property> tag in your Bean configuration file. Both the cases deal with passing singular value to a bean.

Now what about if you want to pass plural values like Java Collection types List, Set, Map, and Properties. To handle the situation, Spring offers four types of collection configuration elements which are as follows:

Element	Description
<list>	This helps in wiring ie injecting a list of values, allowing duplicates.
<set>	This helps in wiring a set of values but without any duplicates.
<map>	This can be used to inject a collection of name-value pairs where name and value can be of any type.
<props>	This can be used to inject a collection of name-value pairs where the name and value are both Strings.
You can use either <list> or <set> to wire any implementation of java.util.Collection or an array.

You will come across two situations (a) Passing direct values of the collection and (b) Passing a reference of a bean as one of the collection elements.
    -->
    <!-- Definition for javaCollection -->
    <bean id="javaCollection" class="ru.egalvi.springtutorial.JavaCollection">

        <!-- results in a setAddressList(java.util.List) call -->
        <property name="addressList">
            <list>
                <value>INDIA</value>
                <value>Pakistan</value>
                <value>USA</value>
                <value>USA</value>
            </list>
        </property>

        <!-- results in a setAddressSet(java.util.Set) call -->
        <property name="addressSet">
            <set>
                <value>INDIA</value>
                <value>Pakistan</value>
                <value>USA</value>
                <value>USA</value>
            </set>
        </property>

        <!-- results in a setAddressMap(java.util.Map) call -->
        <property name="addressMap">
            <map>
                <entry key="1" value="INDIA"/>
                <entry key="2" value="Pakistan"/>
                <entry key="3" value="USA"/>
                <entry key="4" value="USA"/>
            </map>
        </property>

        <!-- results in a setAddressProp(java.util.Properties) call -->
        <property name="addressProp">
            <props>
                <prop key="one">INDIA</prop>
                <prop key="two">Pakistan</prop>
                <prop key="three">USA</prop>
                <prop key="four">USA</prop>
            </props>
        </property>

    </bean>
</beans>